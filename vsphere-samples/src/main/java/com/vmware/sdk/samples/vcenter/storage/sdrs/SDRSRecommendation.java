/*
 * ******************************************************************
 * Copyright (c) 2025 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc.
 * and/or its subsidiaries.
 *
 * SPDX-License-Identifier: Apache-2.0
 * ******************************************************************
 */

package com.vmware.sdk.samples.vcenter.storage.sdrs;

import static com.vmware.sdk.samples.utils.ssl.SecurityHelper.loadKeystoreOrCreateEmpty;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vmware.sdk.samples.utils.SampleCommandLineParser;
import com.vmware.sdk.vsphere.utils.PropertyCollectorHelper;
import com.vmware.sdk.vsphere.utils.VcenterClient;
import com.vmware.sdk.vsphere.utils.VcenterClientFactory;
import com.vmware.vim25.ClusterRecommendation;
import com.vmware.vim25.ManagedObjectReference;
import com.vmware.vim25.ManagedObjectType;
import com.vmware.vim25.PodStorageDrsEntry;
import com.vmware.vim25.ServiceContent;
import com.vmware.vim25.VimPortType;

/**
 * This sample demonstrates how to Run the Storage DRS on a given SDRS cluster and show the list of recommendations
 * generated by SDRS.
 */
public class SDRSRecommendation {
    private static final Logger log = LoggerFactory.getLogger(SDRSRecommendation.class);
    /** REQUIRED: vCenter FQDN or IP address. */
    public static String serverAddress = "vcenter1.mycompany.com";
    /** REQUIRED: Username to log in to the vCenter Server. */
    public static String username = "username";
    /** REQUIRED: Password to log in to the vCenter Server. */
    public static String password = "password";
    /**
     * OPTIONAL: Absolute path to the file containing the trusted server certificates for establishing TLS connections.
     * Leave empty or null to disable SSL verifications (do not leave it empty on production environments).
     */
    public static String trustStorePath = null;

    /** REQUIRED: StoragePod name. */
    public static String podName = "podName";

    public static void main(String[] args) throws Exception {
        SampleCommandLineParser.load(SDRSRecommendation.class, args);

        VcenterClientFactory factory =
                new VcenterClientFactory(serverAddress, loadKeystoreOrCreateEmpty(trustStorePath));

        try (VcenterClient client = factory.createClient(username, password, null)) {
            VimPortType vimPort = client.getVimPort();
            ServiceContent serviceContent = client.getVimServiceContent();
            PropertyCollectorHelper propertyCollectorHelper = new PropertyCollectorHelper(vimPort, serviceContent);

            ManagedObjectReference srmMoRef = serviceContent.getStorageResourceManager();
            ManagedObjectReference sdrsMoRef =
                    propertyCollectorHelper.getMoRefByName(podName, ManagedObjectType.STORAGE_POD);
            if (sdrsMoRef != null) {
                vimPort.refreshStorageDrsRecommendation(srmMoRef, sdrsMoRef);
                log.info("Success: Refresh Cluster Recommendation.");

                PodStorageDrsEntry podStorageDrsEntry = propertyCollectorHelper.fetch(sdrsMoRef, "podStorageDrsEntry");

                List<ClusterRecommendation> clusterRecommendationList = podStorageDrsEntry.getRecommendation();
                if (!clusterRecommendationList.isEmpty()) {
                    log.info("List of recommendations:");
                    for (ClusterRecommendation recommend : clusterRecommendationList) {
                        log.info(
                                "{} Reason: {} target: {}",
                                recommend.getType(),
                                recommend.getReason(),
                                recommend.getTarget().getValue());
                    }
                } else {
                    log.info("No Recommendations.");
                }
            } else {
                throw new RuntimeException("Failure: StoragePod " + podName + " not found.");
            }
        }
    }
}
